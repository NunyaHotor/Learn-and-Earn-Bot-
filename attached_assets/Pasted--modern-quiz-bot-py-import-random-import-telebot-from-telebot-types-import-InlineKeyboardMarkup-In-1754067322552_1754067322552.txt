# modern_quiz_bot.py
import random
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime

from sheet_manager import (
    register_user,
    get_user_data,
    update_user_tokens_points,
    reward_referrer,
    log_token_purchase,
    increment_referral_count,
    log_point_redemption  # ensure this exists in sheet_manager.py
)

API_KEY = "8470972230:AAFs4wYw94DOiXk2TLpyM0iKlfXLL78JdBE"
bot = telebot.TeleBot(API_KEY, parse_mode='HTML')

quizzes = [
    {"q": "Who was Ghana‚Äôs first president?", "a": "Kwame Nkrumah", "choices": ["Kwame Nkrumah", "Rawlings", "Mahama", "Busia"]},
    {"q": "When did Ghana gain independence?", "a": "1957", "choices": ["1945", "1957", "1960", "1966"]},
    {"q": "What is the capital of Ghana?", "a": "Accra", "choices": ["Kumasi", "Tamale", "Accra", "Ho"]},
    {"q": "Which region is Lake Volta in?", "a": "Volta", "choices": ["Ashanti", "Volta", "Northern", "Bono"]},
    {"q": "Who led the 1948 Accra Riots?", "a": "The Big Six", "choices": ["Yaa Asantewaa", "The Big Six", "Danquah", "Rawlings"]}
]

pending_momo = {}
current_question = {}

TOKEN_PRICING = {
    "1 token (‚Çµ2 or $0.20)": {"amount": 1, "price": "2 GHS / 0.20 USD"},
    "5 tokens (‚Çµ9 or $0.90)": {"amount": 5, "price": "9 GHS / 0.90 USD"},
    "10 tokens (‚Çµ17 or $1.70)": {"amount": 10, "price": "17 GHS / 1.70 USD"}
}

REDEEM_OPTIONS = {
    "1 Token": {"points": 100, "reward": "+1 Token"},
    "GHS 5 Airtime": {"points": 250, "reward": "GHS 5 Airtime"},
    "GHS 10 Airtime": {"points": 400, "reward": "GHS 10 Airtime"},
    "5 USDT": {"points": 800, "reward": "5 USDT (Crypto)"}
}

PAYMENT_LINKS = {
    "momo": "https://paystack.com/pay/momo-learn4cash",
    "crypto": "https://buycrypto.learn4cash.io"
}

PAYMENT_INFO = """
üí∏ <b>Payment Instructions</b>

üì≤ <b>MoMo</b>: Send payment to <b>0551234567</b> (Learn4Cash)
üîó Or pay via: <a href='{momo_link}'>MoMo Online Payment</a>

üí∞ <b>Crypto (USDT)</b>: <code>0xYourCryptoWalletAddress</code>
üîó Or pay via: <a href='{crypto_link}'>Crypto Payment</a>

üì¨ After sending payment, send your screenshot to @Learn4CashAdmin.
""".format(momo_link=PAYMENT_LINKS['momo'], crypto_link=PAYMENT_LINKS['crypto'])


@bot.message_handler(commands=['redeem'])
def redeem_handler(message):
    user = get_user_data(message.chat.id)
    if not user:
        bot.send_message(message.chat.id, "Please /start first.")
        return

    points = user['Points']
    markup = InlineKeyboardMarkup()
    for label, reward in REDEEM_OPTIONS.items():
        if points >= reward['points']:
            markup.add(InlineKeyboardButton(text=f"{label} ({reward['points']} pts)", callback_data=f"redeem:{label}"))
    if markup.keyboard:
        bot.send_message(message.chat.id, "üè≠ Choose a reward to redeem:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è You don't have enough points to redeem any rewards yet.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("redeem:"))
def redeem_callback_handler(call):
    chat_id = call.message.chat.id
    label = call.data.split("redeem:")[1]
    reward = REDEEM_OPTIONS[label]
    user = get_user_data(chat_id)

    if user['Points'] < reward['points']:
        bot.send_message(chat_id, "‚ùå You do not have enough points.")
        return

    new_points = user['Points'] - reward['points']
    update_user_tokens_points(chat_id, user['Tokens'], new_points)

    try:
        log_point_redemption(chat_id, label, reward['points'], datetime.utcnow().isoformat())
    except Exception as e:
        print("[ERROR] Failed to log redemption:", e)

    bot.answer_callback_query(call.id)
    bot.send_message(chat_id, f"‚úÖ You've redeemed <b>{label}</b>. Admin will process your reward soon.")
    bot.send_message(chat_id, "üì¨ Please send your details/screenshot to @Learn4CashAdmin for confirmation.")
